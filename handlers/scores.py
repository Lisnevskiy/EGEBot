from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from database.db import session
from database.models import Score, Student
from keyboards.inline import get_confirmation_keyboard, get_register_button
from keyboards.reply import get_main_menu_keyboard
from states.score import EnterScore

router = Router()


@router.message(Command(commands=["enter_scores"]))
async def enter_scores(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /enter_scores –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ. –ï—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω,
    –ø–µ—Ä–µ–≤–æ–¥–∏—Ç FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ –±–∞–ª–ª–æ–≤.
    """

    student = session.query(Student).filter_by(id=message.from_user.id).first()
    if not student:
        await message.answer(
            "–¢–µ–±—è –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=get_register_button(),
        )
        return

    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    await state.set_state(EnterScore.subject)


@router.message(EnterScore.subject)
async def get_subject(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –±–∞–ª–ª–æ–≤.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """

    subject = message.text.strip()
    await state.update_data(subject=subject)
    await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}:")
    await state.set_state(EnterScore.score)


@router.message(EnterScore.score)
async def get_score(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –±–∞–ª–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é,
    –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –±–∞–ª–ª—ã –ø–æ –¥—Ä—É–≥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥.
    """

    try:
        score = int(message.text.strip())
        if not 0 <= score <= 100:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–ª (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100).")

    data = await state.get_data()
    subject = data.get("subject")

    student = session.query(Student).filter_by(id=message.from_user.id).first()

    existing_score = session.query(Score).filter_by(student_id=student.id, subject=subject).first()

    if existing_score:
        existing_score.score = score
        action_text = "–æ–±–Ω–æ–≤–ª–µ–Ω—ã"
    else:
        score_entry = Score(subject=subject, score=score, student_id=student.id)
        session.add(score_entry)
        action_text = "—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"

    session.commit()
    await message.answer(
        f"–ë–∞–ª–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} —É—Å–ø–µ—à–Ω–æ {action_text}!\n\n" "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç?",
        reply_markup=get_confirmation_keyboard(),
    )
    await state.set_state(EnterScore.confirm)


@router.message(Command(commands=["view_scores"]))
async def view_scores(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /view_scores –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –±–∞–ª–ª—ã,
    –∑–∞—Ç–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ —Å—É–º–º—É –±–∞–ª–ª–æ–≤.
    """

    student = session.query(Student).filter_by(id=message.from_user.id).first()
    if not student:
        await message.answer(
            "–¢–µ–±—è –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=get_register_button(),
        )
        return

    scores = session.query(Score).filter_by(student_id=student.id).all()
    if not scores:
        await message.answer(
            "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –ø–æ –ï–ì–≠. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /enter_scores —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã.",
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –±–∞–ª–ª–æ–≤
    total_score = 0
    response = f"üìä –¢–≤–æ–∏ –±–∞–ª–ª—ã –ø–æ –ï–ì–≠, {student.first_name}:\n\n"

    for score in scores:
        total_score += score.score
        response += f"üìù {score.subject}: {score.score} –±–∞–ª–ª–æ–≤\n"

    response += f"\nüìà –û–±—â–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤: {total_score}"
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç
    if scores:
        average_score = total_score / len(scores)
        response += f"\nüìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {average_score:.1f}"

    await message.answer(response, reply_markup=get_main_menu_keyboard())


@router.message(F.text == "üìù –í–≤–µ—Å—Ç–∏ –±–∞–ª–ª—ã")
async def enter_scores_button_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üìù –í–≤–µ—Å—Ç–∏ –±–∞–ª–ª—ã" –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /enter_scores"""

    await enter_scores(message, state)


@router.message(F.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã")
async def view_scores_button_handler(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã" –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /view_scores"""

    await view_scores(message)


@router.callback_query(F.data.startswith("confirm_"))
async def process_confirmation(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–î–∞", –ø–µ—Ä–µ–≤–æ–¥–∏—Ç FSM –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞,
    –∏–Ω–∞—á–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤–≤–æ–¥ –±–∞–ª–ª–æ–≤ –∏ –æ—á–∏—â–∞–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """

    action = callback.data.split("_")[1]

    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    await callback.message.edit_reply_markup(reply_markup=None)

    if action == "yes":
        await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:")
        await state.set_state(EnterScore.subject)
    else:
        await callback.message.answer(
            "–í–≤–æ–¥ –±–∞–ª–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.\n" "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –±–∞–ª–ª—ã –ø–æ –ï–ì–≠ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /view_scores",
            reply_markup=get_main_menu_keyboard(),
        )
        await state.clear()

    await callback.answer()
